# app/bot/handlers/dreams.py
from __future__ import annotations

import re
from datetime import datetime, date, time, timedelta
from zoneinfo import ZoneInfo

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.db.base import SessionLocal
from app.db.models import User, Dream

router = Router()

# ===== FSM =====
class DreamsForm(StatesGroup):
    waiting_date = State()


DATE_RE = re.compile(r"^\s*(\d{2})\.(\d{2})\.(\d{4})\s*$")  # –î–î.–ú–ú.–ì–ì–ì–ì


def _parse_date(text: str) -> date | None:
    """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì + —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è –¥–∞—Ç–∞."""
    m = DATE_RE.match(text or "")
    if not m:
        return None
    dd, mm, yyyy = map(int, m.groups())
    try:
        return date(yyyy, mm, dd)
    except ValueError:
        return None


@router.message(F.text == "üìú –ú–æ–∏ —Å–Ω—ã")
async def ask_date(m: Message, state: FSMContext) -> None:
    await state.set_state(DreamsForm.waiting_date)
    await m.answer(
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>05.09.2025</code>).\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel",
        parse_mode="HTML",
    )


@router.message(DreamsForm.waiting_date, F.text)
async def get_dream_by_date(m: Message, state: FSMContext) -> None:
    # 1) –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    d = _parse_date(m.text or "")
    if not d:
        await m.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>05.09.2025</code>.",
            parse_mode="HTML",
        )
        return

    tg_id = m.from_user.id

    # 2) –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    with SessionLocal() as s:
        user: User | None = s.query(User).filter(User.tg_id == tg_id).first()

        if not user:
            await state.clear()
            await m.answer("–ù–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        # 3) –≥—Ä–∞–Ω–∏—Ü—ã —Å—É—Ç–æ–∫ –≤ –õ–û–ö–ê–õ–¨–ù–û–ô –∑–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            tz = ZoneInfo(user.tz or "UTC")
        except Exception:
            tz = ZoneInfo("UTC")

        start_local = datetime.combine(d, time.min).replace(tzinfo=tz)
        end_local = start_local + timedelta(days=1)

        # 4) –¥–æ—Å—Ç–∞—ë–º —Å–Ω—ã –∑–∞ –¥–µ–Ω—å (created_at —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ timestamptz ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–¥—ë—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
        dreams = (
            s.query(Dream)
            .filter(
                Dream.user_id == user.id,
                Dream.created_at >= start_local,
                Dream.created_at < end_local,
            )
            .order_by(Dream.created_at.asc())
            .all()
        )

    # 5) –æ—Ç–≤–µ—Ç
    if not dreams:
        await state.clear()
        await m.answer(f"üò¥ –ó–∞–ø–∏—Å–µ–π –∑–∞ {d.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ï—Å–ª–∏ –ø–æ–∑–∂–µ –≤–≤–µ–¥—ë—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤ –¥–µ–Ω—å ‚Äî –≤—ã–≤–µ–¥–µ–º –≤—Å—ë –ø–æ –ø–æ—Ä—è–¥–∫—É
    pieces = []
    for i, dr in enumerate(dreams, start=1):
        t_local = dr.created_at.astimezone(tz).strftime("%H:%M")
        parts = [f"<b>–°–æ–Ω #{i} ‚Ä¢ {t_local}</b>"]
        parts.append(dr.text or "‚Äî")
        # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–º–≤–æ–ª—ã/—ç–º–æ—Ü–∏–∏/–ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ:
        # if dr.symbols: parts.append(f"üîñ –°–∏–º–≤–æ–ª—ã: { ... }")
        # if dr.actions: parts.append(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: { ... }")
        pieces.append("\n".join(parts))

    await state.clear()
    await m.answer(
        f"üìú <b>–í–∞—à–∏ —Å–Ω—ã –∑–∞ {d.strftime('%d.%m.%Y')}</b>:\n\n" + "\n\n".join(pieces),
        parse_mode="HTML",
    )


# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –±—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ–Ω–∞
@router.message(DreamsForm.waiting_date, F.text == "/cancel")
async def cancel(m: Message, state: FSMContext) -> None:
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–∏–ª. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.")
