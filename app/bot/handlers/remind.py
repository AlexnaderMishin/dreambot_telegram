# app/bot/handlers/remind.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from sqlalchemy import text
from app.db.base import SessionLocal
from app.db.models import User

# —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á
from app.bot.reminders import (
    schedule_for_user,
    unschedule_for_user,
    toggle_remind,
)

# —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–≤–ø–∞–¥–∞–ª –Ω–∞ 100% ‚Äî –±–µ—Ä—ë–º –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
from app.bot.ui import main_kb, HELP_TEXT  # —Ç–æ–ª—å–∫–æ –¥–ª—è /remind, –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
from app.bot.ui import REMIND_BTN  # <<< –í–ê–ñ–ù–û: –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"

router = Router()

def _kb_remind_menu() -> ReplyKeyboardMarkup:
    kb = [[
        KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å"),
        KeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å"),
    ], [
        KeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")
    ]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

async def _ensure_user(message: types.Message) -> User | None:
    with SessionLocal() as s:
        u = s.query(User).filter(User.tg_id == message.from_user.id).first()
        if not u:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
            return None
        return u

async def _show_menu(message: types.Message):
    await message.answer("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=_kb_remind_menu())

@router.message(Command("remind"))
@router.message(F.text == REMIND_BTN)  # –ª–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def remind_entry(message: types.Message):
    u = await _ensure_user(message)
    if not u:
        return
    await _show_menu(message)

@router.message(F.text.casefold() == "–≤–∫–ª—é—á–∏—Ç—å")
async def remind_on(message: types.Message):
    u = await _ensure_user(message)
    if not u:
        return
    toggle_remind(u.id, True)

    # –µ—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –º–æ–¥–µ–ª–∏ (08:30)
    await schedule_for_user(message.bot, u.id, u.tg_id, u.tz or "Europe/Moscow")
    await message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 08:30.")

@router.message(F.text.casefold() == "–≤—ã–∫–ª—é—á–∏—Ç—å")
async def remind_off(message: types.Message):
    u = await _ensure_user(message)
    if not u:
        return
    toggle_remind(u.id, False)
    unschedule_for_user(u.id)
    await message.answer("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")

@router.message(F.text == "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")
async def ask_time(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:20).")

@router.message(F.text.regexp(r"^\s*\d{1,2}:\d{2}\s*$"))
async def set_time(message: types.Message):
    u = await _ensure_user(message)
    if not u:
        return

    raw = message.text.strip()
    hh, mm = raw.split(":")
    try:
        hh = int(hh)
        mm = int(mm)
        if not (0 <= hh <= 23 and 0 <= mm <= 59):
            raise ValueError
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 09:20")
        return

    from datetime import time as dtime
    with SessionLocal() as s:
        u = s.query(User).filter(User.tg_id == message.from_user.id).first()
        u.remind_time = dtime(hh, mm)
        s.commit()

    # –ø–µ—Ä–µ-—Å–æ–∑–¥–∞–¥–∏–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    with SessionLocal() as s:
        u = s.query(User).filter(User.tg_id == message.from_user.id).first()
        if u and u.remind_enabled:
            unschedule_for_user(u.id)
            await schedule_for_user(message.bot, u.id, u.tg_id, u.tz or "Europe/Moscow")
    await message.answer(f"‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {hh:02d}:{mm:02d}.")

# —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–º –∏–º–µ–Ω–µ–º
remind_router = router
