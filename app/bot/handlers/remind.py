# app/bot/handlers/remind.py
from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import time

from app.db.base import SessionLocal
from app.db.models import User
from app.bot.reminders import (
    schedule_for_user,
    unschedule_for_user,
    toggle_remind,
)

# —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ —Å–æ–≤–ø–∞–¥–∞–ª —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
from app.bot.ui import REMIND_BTN, HELP_TEXT

remind_router = Router(name="remind")
__all__ = ["remind_router"]

# ==========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
# ==========================

def _t_to_str(t: time) -> str:
    return f"{t.hour:02d}:{t.minute:02d}"

def _clamp_hour(h: int) -> int:
    return (h + 24) % 24

def _clamp_min(m: int) -> int:
    return (m + 60) % 60

def _kb_time_picker(h: int, m: int) -> types.InlineKeyboardMarkup:
    """
    –ò–Ω–ª–∞–π–Ω ¬´—Ñ–æ—Ä–º–∞¬ª –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.
    """
    preview = types.InlineKeyboardButton(text=f"üïí {h:02d}:{m:02d}", callback_data="tp:nop")
    dec_h = types.InlineKeyboardButton(text="‚àí —á–∞—Å", callback_data=f"tp:dec_h:{h}:{m}")
    inc_h = types.InlineKeyboardButton(text="+ —á–∞—Å", callback_data=f"tp:inc_h:{h}:{m}")
    dec_m = types.InlineKeyboardButton(text="‚àí –º–∏–Ω", callback_data=f"tp:dec_m:{h}:{m}")
    inc_m = types.InlineKeyboardButton(text="+ –º–∏–Ω", callback_data=f"tp:inc_m:{h}:{m}")
    ok    = types.InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"tp:save:{h}:{m}")
    cancel= types.InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="tp:cancel")

    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [dec_h, preview, inc_h],
            [dec_m, ok, inc_m],
            [cancel],
        ]
    )


def _parse_tp(data: str) -> tuple[str, int | None, int | None]:
    """
    –†–∞–∑–±–æ—Ä callback_data –≤–∏–¥–∞: 'tp:<action>[:h][:m]'.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (action, h, m) ‚Äî h/m –º–æ–≥—É—Ç –±—ã—Ç—å None.
    """
    parts = data.split(":")
    # tp, action, (maybe h), (maybe m)
    action = parts[1] if len(parts) > 1 else "nop"
    h = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else None
    m = int(parts[3]) if len(parts) > 3 and parts[3].isdigit() else None
    return action, h, m


# =========================================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è¬ª –∏ /remind
# =========================================

@remind_router.message(F.text == REMIND_BTN)
@remind_router.message(Command("remind"))
async def open_remind_menu(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ—Ä—ë–º –∏–∑ –ë–î (remind_time) ‚Äî –∏–Ω–∞—á–µ 08:30.
    """
    tg_id = message.from_user.id

    with SessionLocal() as s:
        user = s.query(User).filter(User.tg_id == tg_id).first()

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
        return

    t: time = user.remind_time or time(8, 30)
    await message.answer(
        "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ –¥–ª—è –≤–∞—à–µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞):",
        reply_markup=_kb_time_picker(t.hour, t.minute),
    )


# =========================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ¬´—Ñ–æ—Ä–º—ã¬ª
# =========================================

@remind_router.callback_query(F.data.startswith("tp:"))
async def on_timepicker_callback(q: types.CallbackQuery):
    action, h, m = _parse_tp(q.data)

    # –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ fallback (–∫–æ–≥–¥–∞ –Ω–µ—Ç h/m –≤ –∫–æ–ª–±—ç–∫–µ)
    cur_h, cur_m = 8, 30
    if h is not None and m is not None:
        cur_h, cur_m = h, m

    if action == "nop":
        await q.answer()
        return

    if action == "cancel":
        await q.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await q.answer()
        return

    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–∞/–º–∏–Ω—É—Ç
    if action in {"inc_h", "dec_h", "inc_m", "dec_m"}:
        if action == "inc_h":
            cur_h = _clamp_hour(cur_h + 1)
        elif action == "dec_h":
            cur_h = _clamp_hour(cur_h - 1)
        elif action == "inc_m":
            cur_m = _clamp_min(cur_m + 5)
        elif action == "dec_m":
            cur_m = _clamp_min(cur_m - 5)

        await q.message.edit_reply_markup(reply_markup=_kb_time_picker(cur_h, cur_m))
        await q.answer()
        return

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if action == "save":
        tg_id = q.from_user.id

        with SessionLocal() as s:
            user = s.query(User).filter(User.tg_id == tg_id).first()
            if not user:
                await q.answer("–°–Ω–∞—á–∞–ª–∞ /start", show_alert=True)
                return

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –≤–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            picked = time(cur_h, cur_m)
            user.remind_time = picked
            user.remind_enabled = True
            s.commit()

            # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
            try:
                unschedule_for_user(user.id)
            except Exception:
                pass

            # user.tz ‚Äî —Å—Ç—Ä–æ–∫–∞ —Ç–∞–π–º–∑–æ–Ω—ã –∏–∑ –ë–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Europe/Moscow")
            t_str = _t_to_str(picked)  # "HH:MM"
            schedule_for_user(q.bot, user.id, user.tg_id, user.tz, t_str)


        await q.message.edit_text(
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞ <b>{cur_h:02d}:{cur_m:02d}</b>.\n"
            f"–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ ¬´{REMIND_BTN}¬ª.",
            parse_mode="HTML",
        )
        await q.answer()
        return

    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await q.answer()
