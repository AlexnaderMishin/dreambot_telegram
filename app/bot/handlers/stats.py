# app/bot/handlers/stats.py
from __future__ import annotations

from collections import Counter, defaultdict
from datetime import datetime, timedelta
from typing import Iterable, List, Tuple

import zoneinfo
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import and_

from app.db.base import SessionLocal
from app.db.models import User, Dream
from app.core.premium import premium_analysis  # —Ç–≤–æ—è –æ–±—ë—Ä—Ç–∫–∞ (api/stub —Ä–µ–∂–∏–º—ã)

router = Router(name="stats")

# –≠–º–æ—Ü–∏–∏: —á—Ç–æ —Å—á–∏—Ç–∞–µ–º ¬´–ø–ª—é—Å–æ–º/–º–∏–Ω—É—Å–æ–º¬ª
POSITIVE = {"—Ä–∞–¥–æ—Å—Ç—å", "–ª—é–±–æ–≤—å", "–∏–Ω—Ç–µ—Ä–µ—Å", "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "—É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–Ω–∞–¥–µ–∂–¥–∞"}
NEGATIVE = {"—Å—Ç—Ä–∞—Ö", "—Ç—Ä–µ–≤–æ–≥–∞", "–≥—Ä—É—Å—Ç—å", "–∑–ª–æ—Å—Ç—å", "—Å—Ç—ã–¥", "–≤–∏–Ω–∞", "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", "—Ç–æ—Å–∫–∞"}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï

def _user_tz_or_utc(tz_name: str | None) -> zoneinfo.ZoneInfo:
    try:
        return zoneinfo.ZoneInfo(tz_name or "UTC")
    except Exception:
        return zoneinfo.ZoneInfo("UTC")

def _period_bounds(now_local: datetime, days: int) -> Tuple[datetime, datetime, datetime, datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - start, end: —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ (end –ù–ï –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
      - prev_start, prev_end: –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ —Ç–æ–π –∂–µ –¥–ª–∏–Ω—ã
    """
    end = now_local.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
    start = end - timedelta(days=days)
    prev_end = start
    prev_start = start - timedelta(days=days)
    return start, end, prev_start, prev_end

def _count_emotions(dreams: Iterable[Dream]) -> Tuple[int, int]:
    pos = neg = 0
    for d in dreams:
        if not d.emotions:
            continue
        for emo in d.emotions:
            e = str(emo).strip().lower()
            if e in POSITIVE:
                pos += 1
            elif e in NEGATIVE:
                neg += 1
    return pos, neg

def _top_symbols(dreams: Iterable[Dream], n: int = 3) -> List[Tuple[str, int]]:
    cnt = Counter()
    for d in dreams:
        if not d.symbols:
            continue
        for item in d.symbols:
            key = (item.get("key") if isinstance(item, dict) else item) or ""
            key = str(key).strip().lower()
            if key:
                cnt[key] += 1
    return cnt.most_common(n)

def _bar10(cur: int, prev: int) -> str:
    """–ù–µ–±–æ–ª—å—à–∞—è –ø–æ–ª–æ—Å–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ (10 —è—á–µ–µ–∫)."""
    if prev < 0: prev = 0
    if cur < 0: cur = 0
    if prev == 0 and cur == 0:
        fill = 0
    elif prev == 0:
        fill = 10
    else:
        ratio = cur / prev
        # –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑—É–º–Ω–æ
        ratio = 0 if ratio < 0 else (2.0 if ratio > 2.0 else ratio)
        fill = round(min(10, max(0, ratio * 5)))  # ~ 1x = 5 —è—á–µ–µ–∫
    return "‚ñÅ" * (10 - fill) + "‚ñá" * fill

def _trend_arrow(cur: int, prev: int) -> str:
    if prev == 0 and cur > 0:
        return "‚ÜóÔ∏è"
    if cur > prev:
        return "‚¨ÜÔ∏è"
    if cur < prev:
        return "‚¨áÔ∏è"
    return "‚û°Ô∏è"

def _human_emo_balance(pos: int, neg: int) -> str:
    total = pos + neg
    if total == 0:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    return f"üôÇ {pos} ¬∑ üòî {neg} (–≤—Å–µ–≥–æ {total})"

def _ai_blocks_or_stub(
    *,
    user_is_premium: bool,
    period_days: int,
    pos: int,
    neg: int,
    top_symbol: str | None,
) -> Tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ–±—â–∏–π_–≤—ã–≤–æ–¥).
    –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º –∏ PREMIUM_MODE –ø–æ–∑–≤–æ–ª—è–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ premium_analysis.
    –ò–Ω–∞—á–µ ‚Äî –æ—Ç–¥–∞—ë–º –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏.
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
    ctx_lines = [
        f"–ü–µ—Ä–∏–æ–¥: {period_days} –¥–Ω–µ–π.",
        f"–ë–∞–ª–∞–Ω—Å —ç–º–æ—Ü–∏–π: –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö={pos}, –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö={neg}.",
        f"–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª (—Ç–æ–ø-1): {top_symbol or '–Ω–µ—Ç'}."
    ]
    ctx = "\n".join(ctx_lines)

    premium_mode = (os.getenv("PREMIUM_MODE") or "stub").lower()

    if user_is_premium and premium_mode in {"api", "stub"}:
        # –ü—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ß–ï–¢–ö–û –≤ –¥–≤—É—Ö –±–ª–æ–∫–∞—Ö, –ø–æ 2‚Äì4 —Å—Ç—Ä–æ–∫–∏ –∫–∞–∂–¥—ã–π.
        prompt = (
            "–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥-—Å–Ω–æ–≤–∏–¥–µ—Ü. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ "
            "–∏ –æ–±—â–∏–π —Å–º—ã—Å–ª–æ–≤–æ–π –≤—ã–≤–æ–¥. –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ –¥–≤—É—Ö –∞–±–∑–∞—Ü–∞—Ö:\n\n"
            "1) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî 2‚Äì4 —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ (—á—Ç–æ –¥–µ–ª–∞—Ç—å/–Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ).\n"
            "2) –û–±—â–∏–π –≤—ã–≤–æ–¥ ‚Äî 2‚Äì4 —Å—Ç—Ä–æ–∫–∏, —Å–ø–æ–∫–æ–π–Ω—ã–π —Å–º—ã—Å–ª–æ–≤–æ–π –∏—Ç–æ–≥ –±–µ–∑ –∫–ª–∏—à–µ.\n\n"
            f"–°–≤–æ–¥–∫–∞:\n{ctx}"
        )
        try:
            html = premium_analysis(prompt)  # –≤–µ—Ä–Ω–µ—Ç HTML/—Ç–µ–∫—Å—Ç
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑—Ä–µ–∑–∞—Ç—å –ø–æ –∞–±–∑–∞—Ü–∞–º ‚Äî –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –ø–æ–ª–æ–∂–∏–º —Ü–µ–ª–∏–∫–æ–º –≤–æ ¬´–í—ã–≤–æ–¥¬ª
            parts = [p.strip() for p in html.split("\n") if p.strip()]
            if len(parts) >= 2:
                rec = parts[0]
                summ = " ".join(parts[1:])
            else:
                rec = "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–∏—Ç–º —Å–Ω–∞ –∏ –º—è–≥–∫—É—é –≤–µ—á–µ—Ä–Ω—é—é —Ä—É—É—Ç–∏–Ω—É."
                summ = html
            return rec, summ
        except Exception:
            pass  # —É–ø–∞–¥—ë–º –≤ –∑–∞–≥–ª—É—à–∫—É

    # –ó–∞–≥–ª—É—à–∫–∏ (–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–º–∏—É–º –∏–ª–∏ –Ω–µ—Ç API)
    rec_stub = (
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–Ω–µ–≤–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ —á—É–≤—Å—Ç–≤–∞—Ö.\n"
        "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ–±—Ä–∞–∑—ã ‚Äî –∑–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –æ–Ω–∏ –¥–ª—è –≤–∞—Å –∑–Ω–∞—á–∞—Ç.\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ 1 —Å–ø–æ–∫–æ–π–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º (–¥—ã—Ö–∞–Ω–∏–µ, —Ç—ë–ø–ª—ã–π –¥—É—à, —á—Ç–µ–Ω–∏–µ)."
    )
    summ_stub = (
        "–ü–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. "
        "–ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –æ–¥–∏–Ω –æ–±—Ä–∞–∑, –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞–∂–Ω—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∑–∞–¥–∞—á—É. "
        "–°–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ—Ç–¥—ã—Ö, —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏ ‚Äî —Ç–∞–∫ —è—Å–Ω–µ–µ –ø—Ä–æ—è–≤–∏—Ç—Å—è –¥–∏–Ω–∞–º–∏–∫–∞."
    )
    return rec_stub, summ_stub


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# UI: –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞

def _kb_period() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="stats:7"),
             InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="stats:30")]
        ]
    )

@router.message(Command("stats"))
@router.message(F.text.lower() == "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".lower())
async def ask_period(m: types.Message) -> None:
    await m.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=_kb_period())


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü–æ–¥—Å—á—ë—Ç –∏ –≤—ã–≤–æ–¥

import os

@router.callback_query(F.data.startswith("stats:"))
async def show_stats(cb: types.CallbackQuery) -> None:
    await cb.answer()
    _, days_str = cb.data.split(":")
    days = 7 if days_str == "7" else 30

    with SessionLocal() as s:
        user = s.query(User).filter_by(tg_id=cb.from_user.id).one_or_none()
        if not user:
            await cb.message.answer("–ù–µ –Ω–∞—à—ë–ª –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return

        tz = _user_tz_or_utc(user.tz)
        now_local = datetime.now(tz)
        start, end, prev_start, prev_end = _period_bounds(now_local, days)

        # –ë–µ—Ä—ë–º ¬´—Å—ã—Ä—ã–µ¬ª –∑–∞–ø–∏—Å–∏
        cur_q = (
            s.query(Dream)
            .filter(
                and_(
                    Dream.user_id == user.id,
                    Dream.created_at >= start,
                    Dream.created_at < end,
                )
            )
            .order_by(Dream.created_at.asc())
        )
        cur = cur_q.all()

        prev_count = (
            s.query(Dream)
            .filter(
                and_(
                    Dream.user_id == user.id,
                    Dream.created_at >= prev_start,
                    Dream.created_at < prev_end,
                )
            )
            .count()
        )

    cur_count = len(cur)
    arrow = _trend_arrow(cur_count, prev_count)
    bar = _bar10(cur_count, prev_count)

    # –≠–º–æ—Ü–∏–∏
    pos, neg = _count_emotions(cur)
    if pos + neg == 0:
        emo_line = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (—á—É–≤—Å—Ç–≤–∞ –Ω–µ –æ—Ç–º–µ—á–∞–ª–∏—Å—å)"
        emotions_missing = True
    else:
        emo_line = f"üôÇ {pos} ¬∑ üòî {neg} (–≤—Å–µ–≥–æ {pos+neg})"
        emotions_missing = False

    # –°–∏–º–≤–æ–ª—ã
    top_list = _top_symbols(cur, n=3)
    if top_list:
        top_str = ", ".join(f"{k} ‚Äî {c}" for k, c in top_list)
        top1 = top_list[0][0]
    else:
        top_str = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        top1 = None

    # –ë–ª–æ–∫–∏ —Å –ò–ò (–∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞)
    rec_block, summ_block = _ai_blocks_or_stub(
        user_is_premium=bool(user.is_premium),
        period_days=days,
        pos=pos,
        neg=neg,
        top_symbol=top1,
    )

    # –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏–º –º—è–≥–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if emotions_missing:
        extra_tip = (
            "\n‚Ä¢ –ß—Ç–æ–±—ã –æ—Ç—á—ë—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ, –æ—Ç–º–µ—á–∞–π—Ç–µ 1‚Äì2 —á—É–≤—Å—Ç–≤–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–Ω–∞ "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–¥–æ—Å—Ç—å/—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ/—Ç—Ä–µ–≤–æ–≥–∞)."
        )
        rec_block = rec_block + extra_tip

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    period_caption = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π"
    period_dates = f"({start.date().strftime('%d.%m.%Y')} ‚Äî {(end - timedelta(days=1)).date().strftime('%d.%m.%Y')})"

    lines: List[str] = []
    lines.append(f"üìä <b>{period_caption}</b> {period_dates}")
    lines.append("")
    lines.append("üßæ <b>–¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã</b>")
    lines.append(f"‚Ä¢ –ö–æ–ª-–≤–æ —Å–Ω–æ–≤: <b>{cur_count}</b> {arrow}  {bar}  (–ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥: {prev_count})")
    lines.append(f"‚Ä¢ –ë–∞–ª–∞–Ω—Å —ç–º–æ—Ü–∏–π: <i>{emo_line}</i>")
    lines.append(f"‚Ä¢ –¢–æ–ø —Å–∏–º–≤–æ–ª–æ–≤: {top_str}")
    lines.append("")
    lines.append("‚ú® <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    lines.append(rec_block)
    lines.append("")
    lines.append("üß≠ <b>–û–±—â–∏–π –≤—ã–≤–æ–¥</b>")
    lines.append(summ_block)

    await cb.message.edit_text("\n".join(lines), parse_mode="HTML")
