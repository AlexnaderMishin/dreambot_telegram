import os
import asyncio
import html
from typing import Optional, List
from aiogram import Router
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.bot.ui import main_kb, HELP_TEXT, kb_premium

# —è–¥—Ä–æ / –∞–Ω–∞–ª–∏–∑ / –ë–î
from app.core.nlp import analyze_dream, Analysis
from app.core.premium import premium_analysis
from app.db.base import SessionLocal
from app.db.models import User, Dream

# –ø–ª–∞—Ç–µ–∂–∏
from app.bot.handlers.payments import router as payments_router
# –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
# from app.bot.handlers.remind import router as remind_router
from app.bot.handlers.remind import remind_router
from app.bot.reminders import scheduler, bootstrap_existing
#–∏–º–ø–æ—Ä—Ç dreams
from app.bot.handlers.dreams import router as dreams_router
#stats.py
from app.bot.handlers.stats import router as stats_router
# –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# from app.bot.handlers.main import router as main_router
# ===================== FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è =====================

class DreamForm(StatesGroup):
    awaiting_text = State()


# ===================== –†–æ—É—Ç–µ—Ä =====================

router = Router(name="main")


# ===================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====================

def _format_basic_reply(*, analysis: Analysis, redis_url: Optional[str] = None) -> str:
    """
    –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä —Å–Ω–∞ –≤ ¬´—Å—Ç–∞—Ä–æ–º¬ª —Ñ–æ—Ä–º–∞—Ç–µ:
    –°–∏–º–≤–æ–ª—ã, –ê—Ä—Ö–µ—Ç–∏–ø—ã, –û–±—â–∏–π —Å–º—ã—Å–ª, –î–µ–π—Å—Ç–≤–∏—è, –ü–æ–¥—Å–∫–∞–∑–∫–∞, –î–∏—Å–∫–ª–µ–π–º–µ—Ä.
    """
    import html
    esc = html.escape

    parts: list[str] = []
    parts.append("<b>–ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä —Å–Ω–∞</b>\n")

    # --- –°–∏–º–≤–æ–ª—ã ---
    syms = analysis.symbols or []
    if syms:
        parts.append("üå∏ <b>–°–∏–º–≤–æ–ª—ã</b>")
        for s in syms:
            key = esc(str(s.get("key", ""))).strip()
            meaning = esc(str(s.get("meaning", ""))).strip()
            if key and meaning:
                parts.append(f"‚Ä¢ <b>{key}</b> ‚Äî {meaning}")
            elif key:
                parts.append(f"‚Ä¢ <b>{key}</b>")
        parts.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # --- –ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã ---
    if analysis.archetypes:
        parts.append("üì¶ <b>–ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã</b>")
        for a in analysis.archetypes:
            parts.append(f"‚Ä¢ {esc(str(a))}")
        parts.append("")

    # --- –û–±—â–∏–π —Å–º—ã—Å–ª ---
    summary = (analysis.summary or "").strip()
    if summary:
        parts.append("üß† <b>–û–±—â–∏–π —Å–º—ã—Å–ª</b>")
        parts.append(esc(summary))
        parts.append("")

    # --- –î–µ–π—Å—Ç–≤–∏—è / —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
    actions = (analysis.actions or []).copy()
    # fallback: –µ—Å–ª–∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤
    if not actions:
        for s in syms:
            for a in s.get("actions", []) or []:
                if a and a not in actions:
                    actions.append(a)

    if actions:
        parts.append("‚úÖ <b>–î–µ–π—Å—Ç–≤–∏—è</b>")
        for a in actions:
            parts.append(f"‚Ä¢ {esc(str(a))}")
        parts.append("")

    # --- –ú—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ ¬´–∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ¬ª ---
    parts.append(
        "üí° –ß—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–±–æ—Ä –±—ã–ª —Ç–æ—á–Ω–µ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ "
        "–æ—Ç–º–µ—Ç–∏—Ç—å: –º–µ—Å—Ç–æ/–æ–±—Å—Ç–∞–Ω–æ–≤–∫—É, 1‚Äì2 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Å–∏–º–≤–æ–ª–∞, "
        "—á—Ç–æ –¥–µ–ª–∞–ª–∏ –≤—ã/–¥—Ä—É–≥–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ (—Å—Ç—Ä–∞—Ö, —Ä–∞–¥–æ—Å—Ç—å, —Ç—Ä–µ–≤–æ–≥–∞‚Ä¶)."
    )
    parts.append("")

    # --- –î–∏—Å–∫–ª–µ–π–º–µ—Ä ---
    parts.append(
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ–∑–æ–º."
    )

    return "\n".join(parts).strip()



async def _analyze_and_reply(m: Message, text: str, user: User) -> None:
    """
    –û–±—â–∞—è —Ç–æ—á–∫–∞: –ø–æ—Å—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î,
    –∞ –∑–∞—Ç–µ–º –æ—Ç–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º –∏–ª–∏ –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç.
    """
    # 1) –í—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ‚Äî –æ–Ω –Ω—É–∂–µ–Ω –∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∏ –∫–∞–∫ —Ñ–æ–ª–±—ç–∫
    analysis = analyze_dream(text, redis_url=os.getenv("REDIS_URL"))

    # 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å —Å–Ω–∞
    with SessionLocal() as s:
        # —Ä–µ—Ñ—Ä–µ—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏ (–Ω–∞ —Å–ª—É—á–∞–π DetachedInstanceError)
        db_user = s.query(User).filter_by(id=user.id).one()
        dream = Dream(
            user_id=db_user.id,
            text=text,
            symbols=analysis.symbols,
            emotions=analysis.emotions,
            actions=analysis.actions,
        )
        s.add(dream)
        s.commit()

    # 3) –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞
    premium_mode = os.getenv("PREMIUM_MODE", "stub").lower()

    if user.is_premium and premium_mode in {"api", "stub"}:
        # –í–Ω—É—Ç—Ä–∏ premium_analysis —É–∂–µ –µ—Å—Ç—å –ª–æ–≥–∏–∫–∞:
        # - –µ—Å–ª–∏ PREMIUM_MODE=api ‚Üí —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI
        # - –∏–Ω–∞—á–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
        html = premium_analysis(text)
        await m.answer(html, parse_mode=ParseMode.HTML)
        return

    # 4) –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    html = _format_basic_reply(analysis=analysis, redis_url=os.getenv("REDIS_URL"))
    await m.answer(html, parse_mode=ParseMode.HTML)


# ===================== –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥/–∫–Ω–æ–ø–æ–∫ =====================

@router.message(Command("start"))
async def cmd_start(m: Message, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ.
    """
    await state.clear()
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())
    # –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç (–µ–¥–∏–Ω–æ–∂–¥—ã ‚Äì –ø—Ä–∏ /start —É–¥–æ–±–Ω–æ)
    await m.answer(HELP_TEXT, parse_mode=ParseMode.HTML)


@router.message(Command("menu"))
async def cmd_menu(m: Message, state: FSMContext) -> None:
    """
    –Ø–≤–Ω—ã–π –ø–æ–∫–∞–∑ –º–µ–Ω—é.
    """
    await state.clear()
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())


@router.message(Command("help"))
async def cmd_help(m: Message) -> None:
    await m.answer(HELP_TEXT, parse_mode=ParseMode.HTML, reply_markup=main_kb())


@router.message(F.text == "‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω")
async def btn_log_dream(m: Message, state: FSMContext) -> None:
    await state.set_state(DreamForm.awaiting_text)
    await m.answer(
        "–û–ø–∏—à–∏—Ç–µ —Å–æ–Ω –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–µ—Å—Ç–æ/–æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞, 1‚Äì2 –∫–ª—é—á–µ–≤—ã—Ö –æ–±—Ä–∞–∑–∞, —á—Ç–æ –¥–µ–ª–∞–ª–∏ –≤—ã/–¥—Ä—É–≥–∏–µ, –≥–ª–∞–≤–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ.",
        reply_markup=main_kb(),
    )


@router.message(DreamForm.awaiting_text, F.text)
async def on_dream_text(m: Message, state: FSMContext) -> None:
    text = (m.text or "").strip()
    if len(text) < 10:
        await m.answer("–ù—É–∂–Ω–æ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —Ö–æ—Ç—è –±—ã 10‚Äì15 —Å–∏–º–≤–æ–ª–æ–≤ üòä", reply_markup=main_kb())
        return

    # –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with SessionLocal() as s:
        user = s.query(User).filter_by(tg_id=m.from_user.id).one_or_none()
        if not user:
            user = User(tg_id=m.from_user.id, username=m.from_user.username or None)
            s.add(user)
            s.commit()
            s.refresh(user)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º
    await _analyze_and_reply(m, text, user)
    await state.clear()
    # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await m.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ", reply_markup=main_kb())


# ===== –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ ¬´–ø–æ–º–æ–≥–∞—é—â–∏–µ¬ª —Ö—ç–Ω–¥–ª–µ—Ä—ã =====

@router.message(F.text == "üìú –ú–æ–∏ —Å–Ω—ã")
async def btn_my_dreams(m: Message) -> None:
    # —Ç—É—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞; –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    await m.answer("–û—Ç–∫—Ä—ã–ª –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤ (—Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).", reply_markup=main_kb())


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def btn_stats(m: Message) -> None:
    await m.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏–∏.", reply_markup=main_kb())


# @router.message(F.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
# async def btn_reminders(m: Message) -> None:
#     await m.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–ª–∏–∑–µ.", reply_markup=main_kb())


@router.message(F.text == "‚≠ê –ü—Ä–µ–º–∏—É–º")
async def btn_premium(m: Message) -> None:
    await m.answer(
        "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=kb_premium(),         # <‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )


# ===== –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é =====

@router.message(F.text)
async def fallback_show_menu(m: Message, state: FSMContext) -> None:
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ-—Ç–æ –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è (–∏–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –∑–∞—à—ë–ª –≤ —á–∞—Ç –±–µ–∑ /start),
    –º—ã –Ω–µ —Ç–µ—Ä—è–µ–º—Å—è, –∞ –º—è–≥–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é.
    """
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ —Å–Ω–∞ ‚Äî –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º
    cur = await state.get_state()
    if cur == DreamForm.awaiting_text.state:
        return
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())


# ===================== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ =====================

async def main() -> None:
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN is not set")

    bot = Bot(token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

# —Ä–æ—É—Ç–µ—Ä—ã
    
    dp.include_router(payments_router)
    dp.include_router(stats_router)
    dp.include_router(dreams_router)  # –∫–Ω–æ–ø–∫–∞ ¬´–ú–æ–∏ —Å–Ω—ã¬ª
    dp.include_router(remind_router)  # –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è¬ª
    dp.include_router(router) 

# webhooks off
    await bot.delete_webhook(drop_pending_updates=True)

# –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–Ω–∏–º–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
    if not scheduler.running:
        scheduler.start()

# –ø–æ–¥–Ω–∏–º–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –ë–ï–ó await)
    bootstrap_existing(bot)

# poll
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())





