# app/bot/main.py
from __future__ import annotations

import os
import asyncio
from typing import List, Optional

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from dotenv import load_dotenv
from loguru import logger

# –í–Ω–µ—à–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
from app.bot.handlers.symbol import router as symbol_router
from app.bot.handlers.stats import router as stats_router
from app.bot.handlers.note import router as note_router
from app.bot.handlers.remind import router as remind_router

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
from app.bot.reminders import scheduler, bootstrap_existing

# –õ–æ–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
from app.core.nlp import analyze_dream, EmotionsCache
from app.db.base import SessionLocal
from app.db.models import User, Dream

# –ü—Ä–µ–º–∏—É–º (–¥–µ–º–æ-—Ä–µ–∂–∏–º, HTML-–æ—Ç–≤–µ—Ç)
from app.core.premium import premium_analysis


# -------------------- –õ–û–ö–ê–õ–¨–ù–´–ï –•–ï–ù–î–õ–ï–†–´ –ß–ï–†–ï–ó ROUTER --------------------
existing_router = Router()


@existing_router.message(CommandStart())
async def start_cmd(m: Message) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ."""
    with SessionLocal() as s:
        user = s.query(User).filter_by(tg_id=m.from_user.id).one_or_none()
        if not user:
            user = User(tg_id=m.from_user.id, username=m.from_user.username or None)
            s.add(user)
            s.commit()

    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>–ü–æ–º–æ—â–Ω–∏–∫ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π</b>.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–Ω–∞ ‚Äî —è –≤—ã–¥–µ–ª—é —Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—é –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /help",
        parse_mode=ParseMode.HTML,
    )


@existing_router.message(Command("help"))
async def help_cmd(m: Message) -> None:
    await m.answer(
        "<b>–ö–æ–º–∞–Ω–¥—ã</b>\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/symbol &lt;—Å–ª–æ–≤–æ&gt; ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7/30 –¥–Ω–µ–π\n"
        "/remind ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/note &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–Ω—É",
        parse_mode=ParseMode.HTML,
    )


@existing_router.message(Command("myid"))
async def myid_cmd(m: Message) -> None:
    await m.answer(f"–í–∞—à tg_id: <code>{m.from_user.id}</code>", parse_mode=ParseMode.HTML)


# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ----------
def format_basic_reply(
    *,
    analysis,
    redis_url: Optional[str] = None,
) -> str:
    """–°—Ç—Ä–æ–∏—Ç HTML-–æ—Ç–≤–µ—Ç –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ (–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ) –∞–Ω–∞–ª–∏–∑–∞."""
    # 1) –°–∏–º–≤–æ–ª—ã
    sym_lines: List[str] = [
        f"‚úß <b>{s['key']}</b> ‚Äî {s['meaning']}" for s in analysis.symbols
    ] or ["‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"]

    # 2) –≠–º–æ—Ü–∏–∏ + –ö–û–ü–ò–ù–ì, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ—Ç
    emo_cache = EmotionsCache(redis_url=redis_url)
    emotions_map = emo_cache.get() or {}

    emo_lines: List[str] = []
    if analysis.emotions:
        for e in analysis.emotions:
            emo_lines.append(f"‚úß {e}")

    # 3) –î–µ–π—Å—Ç–≤–∏—è (–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤)
    act_lines: List[str] = [f"‚úß {a}" for a in analysis.actions] or ["‚Äî –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"]

    # 4) –ê—Ä—Ö–µ—Ç–∏–ø—ã –∏ –æ–±—â–∏–π —Å–º—ã—Å–ª
    arch_lines: List[str] = [f"‚úß {a}" for a in analysis.archetypes] or []
    summary_line: str = analysis.summary.strip() if analysis.summary else ""

    parts: List[str] = [
        "<b>–ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä —Å–Ω–∞</b>",
        "üå∏ <b>–°–∏–º–≤–æ–ª—ã</b>\n" + "\n".join(sym_lines),
    ]

    # –≠–º–æ—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if analysis.emotions:
        parts.append("ü•≤ <b>–≠–º–æ—Ü–∏–∏</b>\n" + "\n".join(emo_lines))

    # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ—Ç, –∞ —ç–º–æ—Ü–∏–∏ –µ—Å—Ç—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–ø–∏–Ω–≥ –∏–∑ –¢–û–ü-—ç–º–æ—Ü–∏–∏
    if not analysis.symbols and analysis.emotions:
        top = analysis.emotions[0]
        edata = emotions_map.get(top, {}) or {}
        desc = (edata.get("description") or "").strip()
        coping = [c for c in (edata.get("coping") or []) if c][:3]
        extra = []
        if desc:
            extra.append(f"‚Äî {desc}")
        if coping:
            extra.append("üß∞ <b>–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–µ–π—á–∞—Å</b>\n" + "\n".join(f"‚úß {c}" for c in coping))
        if extra:
            parts.append("\n".join(extra))

    # –ê—Ä—Ö–µ—Ç–∏–ø—ã
    if arch_lines:
        parts.append("üìú <b>–ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã</b>\n" + "\n".join(arch_lines))

    # –û–±—â–∏–π —Å–º—ã—Å–ª
    if summary_line:
        parts.append("üß† <b>–û–±—â–∏–π —Å–º—ã—Å–ª</b>\n" + summary_line)

    # –î–µ–π—Å—Ç–≤–∏—è
    parts.append("‚úÖ <b>–î–µ–π—Å—Ç–≤–∏—è</b>\n" + "\n".join(act_lines))

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ ¬´–∫–∞–∫ –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å–æ–Ω¬ª (–∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ)
    if len(analysis.symbols) == 0 or len(analysis.emotions) == 0:
        parts.append(
            "üí° <i>–ß—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–±–æ—Ä –±—ã–ª —Ç–æ—á–Ω–µ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–º–µ—Ç–∏—Ç—å:"
            " –º–µ—Å—Ç–æ/–æ–±—Å—Ç–∞–Ω–æ–≤–∫—É, 1‚Äì2 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤–∞,"
            " —á—Ç–æ –¥–µ–ª–∞–ª–∏ –≤—ã/–¥—Ä—É–≥–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ (—Å—Ç—Ä–∞—Ö, —Ä–∞–¥–æ—Å—Ç—å, —Ç—Ä–µ–≤–æ–≥–∞‚Ä¶)</i>"
        )

    # –ú—è–≥–∫–∏–π –∫—Ä–∏–∑–∏—Å-–±–ª–æ–∫ (–µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª)
    if analysis.crisis:
        crisis_blk = [
            "‚ö†Ô∏è <b>–ü–æ—Ö–æ–∂–µ, —Å–µ–π—á–∞—Å –≤–∞–º –Ω–µ–ø—Ä–æ—Å—Ç–æ.</b>",
            "–í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏. –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç—Ä–µ–≤–æ–≥—É ‚Äî –ø–æ–¥—É–º–∞–π—Ç–µ –æ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –∏–ª–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.",
        ]
        if analysis.crisis_help:
            crisis_blk.append(analysis.crisis_help)
        crisis_blk.append("<b>–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</b>")
        crisis_blk.append("‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å: <code>112</code>")
        crisis_blk.append("‚Ä¢ –õ–∏–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122")
        crisis_blk.append("‚Ä¢ –ß–∞—Ç-–ø–æ–¥–¥–µ—Ä–∂–∫–∞: https://help.example.org")
        parts.append("\n".join(crisis_blk))

    parts.append("\n<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ–∑–æ–º.</i>")

    return "\n\n".join(parts)


@existing_router.message(F.text & ~F.via_bot & ~F.text.startswith("/"))
async def on_dream(m: Message) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç —Å–Ω–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î.
       –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å premium ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π (–ø—Ä–µ–º–∏—É–º) –æ—Ç–≤–µ—Ç.
    """
    tg_id = m.from_user.id
    username = m.from_user.username
    text = (m.text or "").strip()

    if len(text) < 10:
        await m.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return

    # –í—Å—ë ‚Äî –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç—å detached-–æ–±—ä–µ–∫—Ç—ã
    with SessionLocal() as s:
        user = s.query(User).filter_by(tg_id=tg_id).one_or_none()
        if not user:
            user = User(tg_id=tg_id, username=username or None)
            s.add(user)
            s.flush()  # —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª—Å—è user.id

        # –§–ª–∞–≥ –ø—Ä–µ–º–∏—É–º–∞ —á–∏—Ç–∞–µ–º –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –ñ–ò–í–ê
        is_premium: bool = bool(getattr(user, "is_premium", False))

        # –°—á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–æ–Ω –Ω—É–∂–µ–Ω –∏ –ø—Ä–µ–º–∏—É–º—É –¥–ª—è –ª–æ–≥–æ–≤/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏/–ë–î)
        analysis = analyze_dream(text, redis_url=os.getenv("REDIS_URL"))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å —Å–Ω–∞
        dream = Dream(
            user_id=user.id,
            text=text,
            symbols=analysis.symbols,
            emotions=analysis.emotions,
            actions=analysis.actions,
        )
        s.add(dream)
        s.commit()

    # –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    if is_premium:
        reply_text = premium_analysis(text)  # –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–∞ —Ä–µ—à–∏—Ç: API –∏–ª–∏ –¥–µ–º–æ
    else:
        reply_text = format_basic_reply(
            analysis=analysis,
            redis_url=os.getenv("REDIS_URL"),
        )

    await m.answer(reply_text, parse_mode=ParseMode.HTML)

# ------------------------------ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ -------------------------------
async def main() -> None:
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN is not set")

    bot = Bot(token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(existing_router)
    dp.include_router(symbol_router)
    dp.include_router(stats_router)
    dp.include_router(note_router)
    dp.include_router(remind_router)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler.start()
    bootstrap_existing(bot)

    logger.info("Starting bot polling...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
