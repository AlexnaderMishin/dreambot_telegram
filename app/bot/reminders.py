from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import text
from app.db.base import SessionLocal
from app.db.models import User
from app.bot.reminders import schedule_for_user, unschedule_for_user, toggle_remind

router = Router()

REMIND_BTN = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"

def _kb_remind_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å") , KeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å")],
            [KeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")],
        ],
        resize_keyboard=True
    )

async def show_remind_menu(message: types.Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —é–∑–µ—Ä –µ—Å—Ç—å
    with SessionLocal() as s:
        u = s.query(User).filter(User.tg_id==message.from_user.id).first()
        if not u:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ /start.", reply_markup=None)
            return
    await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=_kb_remind_menu())

@router.message(Command("remind"))
@router.message(F.text == REMIND_BTN)           # <- –ª–æ–≤–∏–º –∫–Ω–æ–ø–∫—É
async def remind_entry(message: types.Message):
    await show_remind_menu(message)

@router.message(F.text.lower().in_({"–≤–∫–ª—é—á–∏—Ç—å"}))
async def remind_on(message: types.Message):
    with SessionLocal() as s:
        u = s.query(User).filter(User.tg_id==message.from_user.id).first()
        if not u:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
            return
        toggle_remind(u.id, True)
    # 08:30 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç
    await schedule_for_user(message.bot, u.id, u.tg_id, u.tz or "Europe/Moscow")
    await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 08:30.")

@router.message(F.text.lower().in_({"–≤—ã–∫–ª—é—á–∏—Ç—å"}))
async def remind_off(message: types.Message):
    with SessionLocal() as s:
        u = s.query(User).filter(User.tg_id==message.from_user.id).first()
        if not u:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
            return
        toggle_remind(u.id, False)
    unschedule_for_user(message.from_user.id)
    await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")

@router.message(F.text == "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")
async def ask_time(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:20).")

@router.message(F.text.regexp(r"^\s*\d{1,2}:\d{2}\s*$"))
async def set_time(message: types.Message):
    raw = message.text.strip()
    hh, mm = raw.split(":")
    try:
        hh = int(hh); mm = int(mm)
        if not (0 <= hh <= 23 and 0 <= mm <= 59):
            raise ValueError
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 09:20")
        return

    with SessionLocal() as s:
        u = s.query(User).filter(User.tg_id==message.from_user.id).first()
        if not u:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
            return
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –ë–î
        from datetime import time as dtime
        u.remind_time = dtime(hh, mm)
        s.commit()

    # –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º –∑–∞–¥–∞—á—É
    await message.answer(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {hh:02d}:{mm:02d}.")
    with SessionLocal() as s:
        u = s.query(User).filter(User.tg_id==message.from_user.id).first()
        if u and u.remind_enabled:
            unschedule_for_user(u.id)
            await schedule_for_user(message.bot, u.id, u.tg_id, u.tz or "Europe/Moscow")
            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
