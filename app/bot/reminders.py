# app/bot/reminders.py
from __future__ import annotations

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from sqlalchemy import text
from app.db.base import SessionLocal
from app.jobs.astrology_notifications import (
    check_moon_phase_changes,
    send_daily_astro_ping,
)
# app/bot/reminders.py
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π)
scheduler = AsyncIOScheduler(timezone="UTC")
import pytz

scheduler = AsyncIOScheduler(timezone="UTC")
JOB_PREFIX = "remind_user_"
# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
scheduler.add_job(
    check_moon_phase_changes,
    trigger="cron",
    minute="*/30",
    kwargs={"bot": None, "session_maker": SessionLocal},
    id="moon_phase_changes",
    replace_existing=True,
)

scheduler.add_job(
    send_daily_astro_ping,
    trigger="cron",
    minute="*/5",
    kwargs={"bot": None, "session_maker": SessionLocal},
    id="daily_astro_ping",
    replace_existing=True,
)

def _job_id(user_id: int) -> str:
    return f"{JOB_PREFIX}{user_id}"


async def send_reminder(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "üå§ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ó–∞–ø–∏—à–∏—Ç–µ —Å–æ–Ω, –µ—Å–ª–∏ –ø–æ–º–Ω–∏—Ç–µ. /help")


def schedule_for_user(bot: Bot, user_id: int, tg_id: int, tz: str, t_str: str) -> None:
    """
    –°–æ–∑–¥–∞—ë–º (–∏–ª–∏ –ø–µ—Ä–µ-—Å–æ–∑–¥–∞—ë–º) –∑–∞–¥–∞—á—É –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    t_str: —Å—Ç—Ä–æ–∫–∞ HH:MM –≤ –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.
    """
    # –µ—Å–ª–∏ –±—ã–ª–∞ —Å—Ç–∞—Ä–∞—è ‚Äî —É–¥–∞–ª—è–µ–º –º–æ–ª—á–∞
    try:
        scheduler.remove_job(_job_id(user_id))
    except Exception:
        pass

    # —Ä–∞–∑–ª–æ–∂–∏–º –≤—Ä–µ–º—è
    hh, mm = map(int, t_str.split(":", 1))

    # —Ç–∞–π–º–∑–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tz = pytz.timezone(tz or "UTC")

    trigger = CronTrigger(hour=hh, minute=mm, timezone=user_tz)
    scheduler.add_job(
        send_reminder,
        trigger=trigger,
        args=[bot, tg_id],
        id=_job_id(user_id),
        replace_existing=True,
    )


def unschedule_for_user(user_id: int) -> None:
    try:
        scheduler.remove_job(_job_id(user_id))
    except Exception:
        pass



def bootstrap_existing(bot: Bot) -> None:
    """
    –ü–æ–¥–Ω–∏–º–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î –¥–ª—è –≤—Å–µ—Ö, —É –∫–æ–≥–æ remind_enabled = true.
    """
    with SessionLocal() as s:
        rows = s.execute(
            text(
                """
                SELECT id, tg_id, tz
                FROM users
                WHERE remind_enabled = true
                """
            )
        ).fetchall()

    for r in rows:
        t_str = "08:30"
        schedule_for_user(bot, r.id, r.tg_id, r.tz, t_str)

    # <<< –î–û–ë–ê–í–¨ –≠–¢–û: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º bot –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∂–æ–±—ã >>>
    try:
        scheduler.modify_job("moon_phase_changes", kwargs={"bot": bot, "session_maker": SessionLocal})
    except Exception:
        pass
    try:
        scheduler.modify_job("daily_astro_ping", kwargs={"bot": bot, "session_maker": SessionLocal})
    except Exception:
        pass


def toggle_remind(user_id: int, enabled: bool) -> None:
    with SessionLocal() as s:
        s.execute(
            text("UPDATE users SET remind_enabled = :e WHERE id = :id"),
            {"e": enabled, "id": user_id},
        )
        s.commit()
