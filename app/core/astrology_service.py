# app/core/astrology_service.py
from __future__ import annotations
from dataclasses import dataclass
from datetime import datetime, timezone
import html
import os
import re

from app.core.astrology_math import sun_sign, moon_phase

# --------------------- HTML sanitize ---------------------

_ALLOWED = {"b", "i"}
_TAG_RE = re.compile(r"</?([a-zA-Z0-9]+)(?:\s[^>]*)?>", re.IGNORECASE)

def _sanitize_html(s: str, allow_tags: set[str] | None = None) -> str:
    """–û—á–∏—â–∞–µ–º HTML, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ <b> –∏ <i> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)."""
    allow = allow_tags or _ALLOWED
    out: list[str] = []
    pos = 0
    for m in _TAG_RE.finditer(s):
        out.append(html.escape(s[pos:m.start()]))
        tag = m.group(1).lower()
        if tag in allow:
            out.append(s[m.start():m.end()])
        pos = m.end()
    out.append(html.escape(s[pos:]))
    return "".join(out)

# ---------------------- LLM call -------------------------

def _call_llm(*, system: str, user: str, model: str, temperature: float = 0.4) -> str:
    from openai import OpenAI
    api_key = os.getenv("LLM_ASTROLOGY_KEYS") or os.getenv("OPENAI_API_KEY")
    if not api_key:
        # –º—è–≥–∫–∏–π —Ñ–æ–ª–ª–±–µ–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª (–≤ –ø—Ä–æ–¥–µ –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
        return (
            "<b>–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –†–∞–∫ (–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞ üåñ)</b>\n"
            "–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ò–º—è –§–∞–º–∏–ª–∏—è –Ω–∞ 25-–π –¥–µ–Ω—å –£–±—ã–≤–∞—é—â–µ–π –õ—É–Ω—ã üåñ\n\n"
            "‚ú® –§–æ–∫—É—Å 1\n"
            "–î–µ–º–æ-—Ä–µ–∂–∏–º: –Ω–µ—Ç –∫–ª—é—á–∞ API. –°–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
            "‚ú® –§–æ–∫—É—Å 2\n"
            "–î–µ–º–æ-—Ä–µ–∂–∏–º: –Ω–µ—Ç –∫–ª—é—á–∞ API.\n\n"
            "‚ú® –§–æ–∫—É—Å 3\n"
            "–î–µ–º–æ-—Ä–µ–∂–∏–º: –Ω–µ—Ç –∫–ª—é—á–∞ API.\n\n"
            "‚ö†Ô∏è –ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏–µ:\n"
            "–î–µ–º–æ-—Ä–µ–∂–∏–º: –Ω–µ—Ç –∫–ª—é—á–∞ API.\n\n"
            "<i>üî≠ –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–º –∑–Ω–∞–∫–µ –∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –õ—É–Ω—ã.</i>"
        )
    client = OpenAI(api_key=api_key)
    resp = client.chat.completions.create(
        model=model,
        messages=[{"role": "system", "content": system},
                  {"role": "user", "content": user}],
        temperature=temperature,
    )
    return resp.choices[0].message.content or ""

# ---------------------- Data model -----------------------

@dataclass
class AstroInput:
    full_name: str
    birth_date: datetime
    birth_time: str | None = None
    birthplace: str | None = None

# ---------------------- Facts builder --------------------

def build_facts(ai: AstroInput) -> dict:
    sign = sun_sign(ai.birth_date)

    # –¢–µ—Å—Ç–æ–≤—ã–π –æ–≤–µ—Ä—Ä–∞–π–¥ —Ñ–∞–∑—ã (–Ω–µ —Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–¥–µ):
    # LUNAR_PHASE_FOR_TEST in {"new","wax","full","wan"}
    override = (os.getenv("LUNAR_PHASE_FOR_TEST") or "").lower().strip()
    if override in {"new", "wax", "full", "wan"}:
        mapping = {
            "new": ("–ù–æ–≤–æ–ª—É–Ω–∏–µ", "üåë\ufe0f", 0),
            "wax": ("–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞", "üåî\ufe0f", 5),
            "full": ("–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "üåï\ufe0f", 14),
            "wan": ("–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞", "üåñ\ufe0f", 20),
        }
        phase_label, emoji, day = mapping[override]
    else:
        phase_label, day, emoji = moon_phase(datetime.now(timezone.utc))

    return {"sign": sign, "phase": phase_label, "phase_day": day, "phase_emoji": emoji}

# ---------------------- Output normalize -----------------

_H1_RE = re.compile(r"^\s*<b>–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑.+?</b>\s*$", re.IGNORECASE)
_SUB_RE = re.compile(r"^\s*–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è.+$", re.IGNORECASE)

def _normalize_to_agreed_format(raw: str, *, facts: dict, ai: AstroInput) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ:
    - –µ—Å–ª–∏ GPT —É–∂–µ –≤—ã–≤–µ–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫/–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏),
      –∏–Ω–∞—á–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º.
    - –Ω–µ –º–µ–Ω—è–µ–º —Å–º—ã—Å–ª –±–ª–æ–∫–æ–≤, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–±–∑–∞—Ü—ã.
    """
    text = raw.replace("\\n", "\n").strip()

    # —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—Ä–µ—Ñ–µ–π—Å—ã —Ç–∏–ø–∞ "–í–æ—Ç –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑:" –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–≥–∞/—Å—Ç—Ä–æ–∫–∏
    text = re.sub(r"^\s*(–≤–æ—Ç[^:\n]*:|–æ—Ç–≤–µ—Ç:)\s*\n", "", text, flags=re.IGNORECASE)

    lines = [l.rstrip() for l in text.splitlines() if l.strip() != ""]
    body_lines: list[str] = []

    # –∏—â–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –¥–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    has_h1 = any(_H1_RE.match(l) for l in lines[:3])
    has_sub = any(_SUB_RE.match(l) for l in lines[:5])

    # –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—É–±–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –µ—Å–ª–∏ GPT –∏—Ö –ø–æ–≤—Ç–æ—Ä–∏–ª
    filtered = []
    seen_h1 = False
    seen_sub = False
    for l in lines:
        if _H1_RE.match(l):
            if not seen_h1:
                filtered.append(l)
                seen_h1 = True
            continue
        if _SUB_RE.match(l):
            if not seen_sub:
                filtered.append(l)
                seen_sub = True
            continue
        filtered.append(l)

    lines = filtered

    # –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ –±—ã–ª–æ ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ö —Å–∞–º–∏
    header_needed = not has_h1
    sub_needed = not has_sub

    if header_needed:
        h1 = f"<b>–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –¥–ª—è {facts['sign']} ({facts['phase']} {facts['phase_emoji']})</b>"
        body_lines.append(h1)
    else:
        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        # (–æ–Ω–æ —É–∂–µ –≤ lines[0..])
        pass

    if sub_needed:
        sub = f"–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {ai.full_name} –Ω–∞ {facts['phase_day']}-–π –¥–µ–Ω—å {facts['phase']} {facts['phase_emoji']}"
        body_lines.append(sub)

    # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª
    body_lines.extend(lines if (has_h1 or has_sub) else lines)

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏ –ª—ë–≥–∫–∞—è —á–∏—Å—Ç–∫–∞
    body = "\n\n".join(body_lines)
    body = re.sub(r"\n{3,}", "\n\n", body).strip()

    return body

# ---------------------- Public API -----------------------

def render_llm(facts: dict, ai: AstroInput) -> str:
    """
    GPT —Å–∞–º —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑ —Å—Ç—Ä–æ–≥–æ –≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    –ú—ã —Ç–æ–ª—å–∫–æ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º HTML –∏ –ø–æ–¥–ø—Ä–∞–≤–ª—è–µ–º —à–∞–ø–∫–∏, –µ—Å–ª–∏ GPT –∏—Ö –ø—Ä–æ–ø—É—Å—Ç–∏–ª.
    """
    model = os.getenv("LLM_ASTROLOGY_MODEL", os.getenv("GPT_MODEL", "gpt-4o-mini"))

    system = (
        "–¢—ã –≤—ã—Å—Ç—É–ø–∞–µ—à—å –≤ —Ä–æ–ª–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –∏ —Å–æ–∑–¥–∞—ë—à—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑.\n\n"
        "–î–∞–Ω–æ: —Å–æ–ª–Ω–µ—á–Ω—ã–π –∑–Ω–∞–∫, —Ç–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ –õ—É–Ω—ã (—Å –Ω–æ–º–µ—Ä–æ–º –¥–Ω—è —Ü–∏–∫–ª–∞), –∞ —Ç–∞–∫–∂–µ –∏–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞. "
        "–û–ø–∏—Ä–∞–π—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (Telegram HTML):\n"
        '1. –ó–∞–≥–æ–ª–æ–≤–æ–∫: "<b>–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –¥–ª—è {–ó–Ω–∞–∫} ({–§–∞–∑–∞} {–≠–º–æ–¥–∑–∏})</b>"\n'
        '2. –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫: "–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {–ò–º—è –§–∞–º–∏–ª–∏—è} –Ω–∞ {–î–µ–Ω—å —Ü–∏–∫–ª–∞}-–π –¥–µ–Ω—å {–§–∞–∑—ã} {–≠–º–æ–¥–∑–∏}"\n'
        '3. –¢—Ä–∏ –±–ª–æ–∫–∞ "‚ú® –§–æ–∫—É—Å 1", "‚ú® –§–æ–∫—É—Å 2", "‚ú® –§–æ–∫—É—Å 3".\n'
        '   - –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "‚ú® –§–æ–∫—É—Å N" (–±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è).\n'
        "   - –ü–æ–¥ –∫–∞–∂–¥—ã–º —Ñ–æ–∫—É—Å–æ–º –Ω–∞–ø–∏—à–∏ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∂–∏–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–Ω–∞–∫–µ –∏ —Ñ–∞–∑–µ –õ—É–Ω—ã. "
        "–ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö –∫–ª–∏—à–µ ‚Äî –¥–æ–±–∞–≤–ª—è–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É.\n"
        '4. –û–¥–∏–Ω –±–ª–æ–∫ "‚ö†Ô∏è –ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏–µ:" ‚Äî 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö –∏–ª–∏ —Ç–æ–º, —á–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è —Å—Ç–æ–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å.\n'
        '5. –í –∫–æ–Ω—Ü–µ —Å–Ω–æ—Å–∫–∞: "<i>üî≠ –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–º –∑–Ω–∞–∫–µ –∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –õ—É–Ω—ã.</i>"\n\n'
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n'
        '‚Äî –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–ª–æ–≤–∞ "–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑" –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö.\n'
        "‚Äî –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏ <b> –∏ <i>.\n"
        "‚Äî –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é.\n"
        "‚Äî –í—Å–µ–≥–¥–∞ –≤—ã–¥–∞–π —Ç—Ä–∏ —Ñ–æ–∫—É—Å–∞ –∏ –æ–¥–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏–µ."
    )

    user = (
        f"–ò–º—è: {ai.full_name}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {ai.birth_date.strftime('%d.%m.%Y')}\n"
        f"–°–æ–ª–Ω–µ—á–Ω—ã–π –∑–Ω–∞–∫: {facts['sign']}\n"
        f"–§–∞–∑–∞ –õ—É–Ω—ã: {facts['phase']} {facts['phase_emoji']}\n"
        f"–ù–æ–º–µ—Ä –¥–Ω—è –ª—É–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {facts['phase_day']}\n"
    )

    raw = _call_llm(system=system, user=user, model=model, temperature=0.4)
    formatted = _normalize_to_agreed_format(raw, facts=facts, ai=ai)
    sanitized = _sanitize_html(formatted, allow_tags={"b", "i"})

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–Ω–æ—Å–∫—É, –µ—Å–ª–∏ GPT –≤–¥—Ä—É–≥ –∑–∞–±—ã–ª
    if "–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–º –∑–Ω–∞–∫–µ" not in sanitized:
        sanitized += "\n\n<i>üî≠ –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–º –∑–Ω–∞–∫–µ –∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –õ—É–Ω—ã.</i>"

    return sanitized
